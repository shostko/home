bath_ligth:

  light:
    - platform: group
      name: Bath Lights
      entities:
        - light.gledopto_1
        - light.gledopto_2
    - platform: group
      name: Toilet Lights
      entities:
        - light.gledopto_3

  input_boolean:
    toilet_occupied:
      name: Toilet Occupied
      icon: mdi:toilet
      initial: false
    bath_occupied:
      name: Bath Occupied
      icon: mdi:shower
      initial: false

  binary_sensor:  
    - platform: template
      sensors:
        toilet_light_timer_required:
          value_template: >-
            {{ 
              is_state('light.toilet_lights', 'on')
            and
              is_state('binary_sensor.toilet_motion', 'off')
            and
              is_state('input_boolean.toilet_occupied', 'off')
            }}
          icon_template: >-
            {% if is_state("binary_sensor.toilet_light_timer_required", "on") %}
              mdi:timer
            {% else %}
              mdi:timer-off
            {% endif %}
        toilet_light_motion_trigger:
          value_template: >-
            {{
              is_state('binary_sensor.toilet_motion', 'on')
            or
              is_state('input_boolean.toilet_occupied', 'on')
            }}
          icon_template: >-
            {% if is_state("binary_sensor.toilet_light_motion_trigger", "on") %}
              mdi:motion-sensor
            {% else %}
              mdi:motion-sensor-off
            {% endif %}
        bath_light_timer_required:
          value_template: >-
            {{ 
              is_state('light.bath_lights', 'on')
            and
              is_state('binary_sensor.bath_motion', 'off')
            and
              is_state('input_boolean.bath_occupied', 'off')
            }}
          icon_template: >-
            {% if is_state("binary_sensor.bath_light_timer_required", "on") %}
              mdi:timer
            {% else %}
              mdi:timer-off
            {% endif %}
        bath_light_motion_trigger:
          value_template: >-
            {{
              is_state('binary_sensor.bath_motion', 'on')
            or
              is_state('input_boolean.bath_occupied', 'on')
            }}
          icon_template: >-
            {% if is_state("binary_sensor.bath_light_motion_trigger", "on") %}
              mdi:motion-sensor
            {% else %}
              mdi:motion-sensor-off
            {% endif %}

  timer:
    toilet_light:
      duration: '00:00:10'
    bath_light:
      duration: '00:00:10'

  script:

    ## BATH

    bath_lights_turn_on:
      mode: restart
      sequence:
        # Включить весь свет днём или один светильник ночью
        - service: light.turn_on
          data_template:
            entity_id: >-
              {%- if is_state('binary_sensor.tod_night', 'on') -%}
                light.gledopto_1
              {%- else -%}
                light.bath_lights
              {%- endif -%}
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    bath_lights_turn_off:
      mode: restart
      sequence:
        # Выключить весь свет
        - service: light.turn_off
          data_template:
            entity_id: light.bath_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    bath_lights_toggle:
      sequence:
        - choose:
            # Весь свет в ванной выключен
            - conditions:
                - condition: state
                  entity_id: light.bath_lights
                  state: 'off'
              sequence:
                # Включить свет
                - service: script.bath_lights_turn_on
          # Любой свет в ванной включен
          default:
            # Выключить весь свет
            - service: script.bath_lights_turn_off

    ## TOILET

    toilet_lights_turn_on:
      mode: restart
      sequence:
        # Включить весь свет днём или один светильник ночью
        - service: light.turn_on
          data_template:
            entity_id: light.toilet_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    toilet_lights_turn_off:
      mode: restart
      sequence:
        # Выключить весь свет
        - service: light.turn_off
          data_template:
            entity_id: light.toilet_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    toilet_lights_toggle:
      sequence:
        - choose:
            # Весь свет в ванной выключен
            - conditions:
                - condition: state
                  entity_id: light.toilet_lights
                  state: 'off'
              sequence:
                # Включить свет
                - service: script.toilet_lights_turn_on
          # Любой свет в ванной включен
          default:
            # Выключить весь свет
            - service: script.toilet_lights_turn_off

  automation:

    # Toilet

    - alias: Toilet light timer reload
      trigger:
        # Таймер должен быть включен
        - platform: state
          entity_id: binary_sensor.toilet_light_timer_required
          to: 'on'
      action:
        # Включить таймер
        - service: timer.start
          entity_id: timer.toilet_light
          data_template: 
            duration: >
              {%- if is_state('binary_sensor.toilet_door', 'on') -%}
                00:01:00
              {%- else -%}
                00:00:10
              {%- endif -%}
  
    - alias: Toilet light timer cancel
      trigger:
        # Таймер должен быть выключен
        - platform: state
          entity_id: binary_sensor.toilet_light_timer_required
          to: 'off'
      action:
        # Выключить таймер
        - service: timer.cancel
          entity_id: timer.toilet_light
    
    - alias: Toilet light ON (via sensors)
      trigger:
        - platform: state
          entity_id: binary_sensor.toilet_light_motion_trigger
          to: 'on'
        - platform: state
          entity_id: binary_sensor.toilet_door
          from: 'off'
          to: 'on'
      condition:
        # Весь свет выключен
        - condition: state
          entity_id: light.toilet_lights
          state: 'off'
      action:
        # Завершить скрипты по туалету
        - service: homeassistant.turn_off
          entity_id: script.toilet_lights_turn_off
        - service: homeassistant.turn_off
          entity_id: script.toilet_lights_toggle
        # Включить свет
        - service: script.toilet_lights_turn_on
    
    - alias: Toilet light OFF (via timer)
      trigger:
        # Таймер
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.toilet_light
      condition:
        # Любой свет включен
        - condition: state
          entity_id: light.toilet_lights
          state: 'on'
      action:
        # Выключить весь свет
        - service: script.toilet_lights_turn_off

    - alias: Toilet lights TOGGLE (via button)
      trigger:
        # Правая кнопка выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_right'
        # Обе кнопки выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_both'
      condition:
        # Недавно не было команды на включение света
        - condition: state
          entity_id: script.toilet_lights_turn_on
          state: 'off'
      action:
        # Переключить свет
        - service: script.toilet_lights_toggle

    - alias: Toilet occupancy ON
      trigger:
        # Обнаружено начало движения
        - platform: state
          entity_id: binary_sensor.toilet_motion
          to: 'on'
        # Дверь закрыта 15 секунд (чуть больше таймера отключения датчика движения)
        - platform: state
          entity_id: binary_sensor.toilet_door
          to: 'off'
          for: "00:00:15"
      condition:
        # Есть движение
        - condition: state
          entity_id: binary_sensor.toilet_motion
          state: 'on'
        # Дверь закрыта
        - condition: state
          entity_id: binary_sensor.toilet_door
          state: 'off'
        # Переменная занятости = не занято
        - condition: state
          entity_id: input_boolean.toilet_occupied
          state: 'off'
      action:
        # Отметить занятость туалета
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.toilet_occupied

    - alias: Toilet occupancy OFF
      trigger:
        # Дверь открылась
        - platform: state
          entity_id: binary_sensor.toilet_door
          to: 'on'
      condition:
        # Переменная занятости = занято
        - condition: state
          entity_id: input_boolean.toilet_occupied
          state: 'on'
      action:
        # Убрать занятость туалета
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.toilet_occupied

    # Bath

    - alias: Bath light timer reload
      trigger:
        # Таймер должен быть включен
        - platform: state
          entity_id: binary_sensor.bath_light_timer_required
          to: 'on'
      action:
        # Включить таймер
        - service: timer.start
          entity_id: timer.bath_light
          data_template: 
            duration: >
              {%- if is_state('binary_sensor.bath_door', 'on') -%}
                00:01:00
              {%- else -%}
                00:00:10
              {%- endif -%}
  
    - alias: Bath light timer cancel
      trigger:
        # Таймер должен быть выключен
        - platform: state
          entity_id: binary_sensor.bath_light_timer_required
          to: 'off'
      action:
        # Выключить таймер
        - service: timer.cancel
          entity_id: timer.bath_light
    
    - alias: Bath light ON (via sensors)
      trigger:
        - platform: state
          entity_id: binary_sensor.bath_light_motion_trigger
          to: 'on'
        - platform: state
          entity_id: binary_sensor.bath_door
          from: 'off'
          to: 'on'
      condition:
        # Весь свет выключен
        - condition: state
          entity_id: light.bath_lights
          state: 'off'
      action:
        # Завершить скрипты по ванне
        - service: homeassistant.turn_off
          entity_id: script.bath_lights_turn_off
        - service: homeassistant.turn_off
          entity_id: script.bath_lights_toggle
        # Включить свет
        - service: script.bath_lights_turn_on
    
    - alias: Bath light OFF (via timer)
      trigger:
        # Таймер
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.bath_light
      condition:
        # Любой свет включен
        - condition: state
          entity_id: light.bath_lights
          state: 'on'
      action:
        # Выключить весь свет
        - service: script.bath_lights_turn_off

    - alias: Bath lights TOGGLE (via button)
      trigger:
        # Левая кнопка выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_left'
        # Обе кнопки выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_both'
      condition:
        # Недавно не было команды на включение света
        - condition: state
          entity_id: script.bath_lights_turn_on
          state: 'off'
      action:
        # Переключить свет
        - service: script.bath_lights_toggle

    - alias: Bath occupancy ON
      trigger:
        # Обнаружено начало движения
        - platform: state
          entity_id: binary_sensor.bath_motion
          to: 'on'
        # Дверь закрыта 15 секунд (чуть больше таймера отключения датчика движения)
        - platform: state
          entity_id: binary_sensor.bath_door
          to: 'off'
          for: "00:00:15"
      condition:
        # Есть движение
        - condition: state
          entity_id: binary_sensor.bath_motion
          state: 'on'
        # Дверь закрыта
        - condition: state
          entity_id: binary_sensor.bath_door
          state: 'off'
        # Переменная занятости = не занято
        - condition: state
          entity_id: input_boolean.bath_occupied
          state: 'off'
      action:
        # Отметить занятость ванны
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.bath_occupied

    - alias: Bath occupancy OFF
      trigger:
        # Дверь открылась
        - platform: state
          entity_id: binary_sensor.bath_door
          to: 'on'
      condition:
        # Переменная занятости = занято
        - condition: state
          entity_id: input_boolean.bath_occupied
          state: 'on'
      action:
        # Убрать занятость туалета
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.bath_occupied
