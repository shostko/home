bath_ligth:

  light:
    - platform: group
      name: Bath Lights
      entities:
        - light.gledopto_1
        - light.gledopto_2
    - platform: group
      name: Toilet Lights
      entities:
        - light.gledopto_3

  input_boolean:
    toilet_occupied:
      name: Toilet Occupied
      icon: mdi:toilet
      initial: false
    bath_occupied:
      name: Bath Occupied
      icon: mdi:shower
      initial: false

  timer:
    toilet_light:
      duration: '00:00:30'
    bath_light:
      duration: '00:00:30'

  script:

    ## BATH

    bath_lights_turn_on:
      mode: restart
      sequence:
        # Включить весь свет днём или один светильник ночью
        - service: light.turn_on
          data_template:
            entity_id: >-
              {%- if is_state('binary_sensor.tod_night', 'on') -%}
                light.gledopto_1
              {%- else -%}
                light.bath_lights
              {%- endif -%}
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    bath_lights_turn_off:
      mode: restart
      sequence:
        # Выключить весь свет
        - service: light.turn_off
          data_template:
            entity_id: light.bath_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    bath_lights_toggle:
      sequence:
        - choose:
            # Весь свет в ванной выключен
            - conditions:
                - condition: state
                  entity_id: light.bath_lights
                  state: 'off'
              sequence:
                # Включить свет
                - service: script.bath_lights_turn_on
          # Любой свет в ванной включен
          default:
            # Выключить весь свет
            - service: script.bath_lights_turn_off

    ## TOILET

    toilet_lights_turn_on:
      mode: restart
      sequence:
        # Включить весь свет днём или один светильник ночью
        - service: light.turn_on
          data_template:
            entity_id: light.toilet_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    toilet_lights_turn_off:
      mode: restart
      sequence:
        # Выключить весь свет
        - service: light.turn_off
          data_template:
            entity_id: light.toilet_lights
        # Подождать 2 секунды (показывая, что скрипт только что сработал)
        - delay: 2

    toilet_lights_toggle:
      sequence:
        - choose:
            # Весь свет в ванной выключен
            - conditions:
                - condition: state
                  entity_id: light.toilet_lights
                  state: 'off'
              sequence:
                # Включить свет
                - service: script.toilet_lights_turn_on
          # Любой свет в ванной включен
          default:
            # Выключить весь свет
            - service: script.toilet_lights_turn_off

  automation:

    # Toilet

    - alias: Toilet light timer reload
      id: Toilet light timer reload
      mode: restart
      trigger:
        # Дверь открылась
        - platform: state
          entity_id: binary_sensor.toilet_door
          from: 'off'
          to: 'on'
        # Дверь закрылась
        - platform: state
          entity_id: binary_sensor.toilet_door
          from: 'on'
          to: 'off'
        # Обнаружено движение
        - platform: state
          entity_id: binary_sensor.toilet_motion
          to: 'on'
        # Включена переменная занятости
        - platform: state
          entity_id: input_boolean.toilet_occupied
          to: 'on'
        # Выключена переменная занятости
        - platform: state
          entity_id: input_boolean.toilet_occupied
          to: 'off'
        # Свет включился
        - platform: state
          entity_id: light.toilet_lights
          to: 'on'
      action:
        # Включить свет, если выключен
        - choose:
            - conditions:
                # Свет выключен
                - condition: state
                  entity_id: light.toilet_lights
                  state: 'off'
              sequence:
                # Завершить скрипты по туалету
                - service: homeassistant.turn_off
                  entity_id: script.toilet_lights_turn_off
                - service: homeassistant.turn_off
                  entity_id: script.toilet_lights_toggle
                # Включить свет
                - service: script.toilet_lights_turn_on
        # Актуализировать параметр занятости
        - choose:
            - conditions:
                # Дверь закрыта
                - condition: state
                  entity_id: binary_sensor.toilet_door
                  state: 'off'
                # Есть движение
                - condition: state
                  entity_id: binary_sensor.toilet_motion
                  state: 'on'
              sequence:
                # Отметить занятость туалета
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.toilet_occupied
            - conditions:
                # Дверь открыта
                - condition: state
                  entity_id: binary_sensor.toilet_door
                  state: 'on'
              sequence:
                # Убрать занятость туалета
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.toilet_occupied
        # (Пере)Запустить таймер
        - service: timer.start
          entity_id: timer.toilet_light
          data_template: 
            duration: >
              {%- if is_state('input_boolean.toilet_occupied', 'on') -%}
                01:00:00
              {%- elif is_state('binary_sensor.toilet_door', 'on') -%}
                00:01:00
              {%- else -%}
                00:00:30
              {%- endif -%}
  
    - alias: Toilet light timer cancel
      id: Toilet light timer cancel
      trigger:
        # Свет выключился
        - platform: state
          entity_id: light.toilet_lights
          to: 'off'
      condition:
        # Таймер включён
        - condition: state
          entity_id: timer.toilet_light
          state: 'active'
      action:
        # Выключить таймер
        - service: timer.cancel
          entity_id: timer.toilet_light
    
    - alias: Toilet light OFF (via timer)
      id: Toilet light OFF (via timer)
      trigger:
        # Таймер
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.toilet_light
      condition:
        # Любой свет включен
        - condition: state
          entity_id: light.toilet_lights
          state: 'on'
      action:
        # Выключить весь свет
        - service: script.toilet_lights_turn_off

    - alias: Toilet lights TOGGLE (via button)
      id: Toilet lights TOGGLE (via button)
      trigger:
        # Правая кнопка выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_right'
        # Обе кнопки выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_both'
      condition:
        # Недавно не было команды на включение света
        - condition: state
          entity_id: script.toilet_lights_turn_on
          state: 'off'
        # Туалет не занят
        - condition: state
          entity_id: input_boolean.toilet_occupied
          state: 'off'
      action:
        # Переключить свет
        - service: script.toilet_lights_toggle

    - alias: Toilet occupancy force ON
      id: Toilet occupancy force ON
      trigger:
        # Правая кнопка выключателя (двойной клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'double_right'
        # Обе кнопки выключателя (двойной клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'double_both'
      condition:
        # Переменная занятости = не занято
        - condition: state
          entity_id: input_boolean.toilet_occupied
          state: 'off'
      action:
        # Отметить занятость туалета
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.toilet_occupied

    # Bath

    - alias: Bath light timer reload
      id: Bath light timer reload
      mode: restart
      trigger:
        # Дверь открылась
        - platform: state
          entity_id: binary_sensor.bath_door
          from: 'off'
          to: 'on'
        # Дверь закрылась
        - platform: state
          entity_id: binary_sensor.bath_door
          from: 'on'
          to: 'off'
        # Обнаружено движение
        - platform: state
          entity_id: binary_sensor.bath_motion
          to: 'on'
        # Включена переменная занятости
        - platform: state
          entity_id: input_boolean.bath_occupied
          to: 'on'
        # Выключена переменная занятости
        - platform: state
          entity_id: input_boolean.bath_occupied
          to: 'off'
        # Свет включился
        - platform: state
          entity_id: light.bath_lights
          to: 'on'
      action:
        # Включить свет, если выключен
        - choose:
            - conditions:
                # Свет выключен
                - condition: state
                  entity_id: light.bath_lights
                  state: 'off'
              sequence:
                # Завершить скрипты по ванной
                - service: homeassistant.turn_off
                  entity_id: script.bath_lights_turn_off
                - service: homeassistant.turn_off
                  entity_id: script.bath_lights_toggle
                # Включить свет
                - service: script.bath_lights_turn_on
        # Актуализировать параметр занятости
        - choose:
            - conditions:
                # Дверь закрыта
                - condition: state
                  entity_id: binary_sensor.bath_door
                  state: 'off'
                # Есть движение
                - condition: state
                  entity_id: binary_sensor.bath_motion
                  state: 'on'
              sequence:
                # Отметить занятость ванной
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.bath_occupied
            - conditions:
                # Дверь открыта
                - condition: state
                  entity_id: binary_sensor.bath_door
                  state: 'on'
              sequence:
                # Убрать занятость ванной
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.bath_occupied
        # (Пере)Запустить таймер
        - service: timer.start
          entity_id: timer.bath_light
          data_template: 
            duration: >
              {%- if is_state('input_boolean.bath_occupied', 'on') -%}
                01:00:00
              {%- elif is_state('binary_sensor.bath_door', 'on') -%}
                00:01:00
              {%- else -%}
                00:00:30
              {%- endif -%}
  
    - alias: Bath light timer cancel
      id: Bath light timer cancel
      trigger:
        # Свет выключился
        - platform: state
          entity_id: light.bath_lights
          to: 'off'
      condition:
        # Таймер включён
        - condition: state
          entity_id: timer.bath_light
          state: 'active'
      action:
        # Выключить таймер
        - service: timer.cancel
          entity_id: timer.bath_light

    - alias: Bath light OFF (via timer)
      id: Bath light OFF (via timer)
      trigger:
        # Таймер
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.bath_light
      condition:
        # Любой свет включен
        - condition: state
          entity_id: light.bath_lights
          state: 'on'
      action:
        # Выключить весь свет
        - service: script.bath_lights_turn_off

    - alias: Bath lights TOGGLE (via button)
      id: Bath lights TOGGLE (via button)
      trigger:
        # Левая кнопка выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_left'
        # Обе кнопки выключателя (одинарный клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'single_both'
      condition:
        # Недавно не было команды на включение света
        - condition: state
          entity_id: script.bath_lights_turn_on
          state: 'off'
        # Ванна не занята
        - condition: state
          entity_id: input_boolean.bath_occupied
          state: 'off'
      action:
        # Переключить свет
        - service: script.bath_lights_toggle

    - alias: Bath occupancy force ON
      id: Bath occupancy force ON
      trigger:
        # Левая кнопка выключателя (двойной клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'double_left'
        # Обе кнопки выключателя (двойной клик)
        - platform: state
          entity_id: sensor.xiaomi_wriless_switch_2_action
          to: 'double_both'
      condition:
        # Переменная занятости = не занято
        - condition: state
          entity_id: input_boolean.bath_occupied
          state: 'off'
      action:
        # Отметить занятость ванны
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.bath_occupied
